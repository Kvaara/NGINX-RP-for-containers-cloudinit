# THIS IS RECOMMENDED
# ensures that you don't get the DEFAULT events object, which can fuck up your NGINX server, because it configures some default settings
# Setting this to empty fixed my problem where I could not connect to Jenkins through the NGINX reverse proxy.
# ! UNCOMMENTED BECAUSE THIS DOES NOT WORK IN /etc/nginx/conf.d/nginx.conf
# events {}

# ! UNCOMMENTED BECAUSE THIS DOES NOT WORK IN /etc/nginx/conf.d/nginx.conf 
# worker_processes auto;

# Complete Nginx Docker reverse proxy config file
# ! THE http {} DIRECTIVE DOES NOT WORK IN /etc/nginx/conf.d/nginx.conf
# http {}

upstream jenkins {
  server jenkins:8080;
}

upstream gitlab {
  server gitlab:80;
}

upstream sonarqube {
  server sonarqube:9000;
}

server {
  listen 80;
  server_name dev.codebased.fi;
  server_tokens off;

  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  location / {
    return 301 https://$host$request_uri;
  }
} 

server {
  listen 443 ssl;
  server_name dev.codebased.fi;
  server_tokens off;

  ssl_certificate /etc/letsencrypt/live/dev.codebased.fi/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/dev.codebased.fi/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  location /jenkins {
    proxy_pass http://jenkins;

    #? This sets the "Host" header to be $host
    #? The "Host" header specifies the host name and port number of server to which the request is being sent to.
    #? In this example, the $host variable would be localhost if user makes a request to localhost
    #? REMEMBER, if the client makes a connection to www.localhost.com/jenkins, the $host WILL STILL be www.localhost.com
    #? The path component ("/jenkins") is not included in the $host variable.
    #? If the request does not include a Host header, or if the Host header is set to a different value than the actual host name of the
    #? upstream server, the upstream server may not be able to properly handle the request.
    # proxy_set_header Host $host/jenkins; ^ The above is the reason why this won't work 
    proxy_set_header    Host                $host;

    # Good routing practice because this ensures that the backend server (e.g., Jenkins) gets the REAL IP Address and not 
    # a proxy/load-balancer's IP address that sits in front of NGINX server.
    # Without this, NGINX sets a default source IP address that will be from the client that connects to NGINX. Hence why the above point.
    # This is more NGINX specific way than the X-Forwarded-For, which is a more De Facto standard way.
    proxy_set_header    X-Real-IP           $remote_addr;

    # The X-Forwarded-For header is a de facto standard header used by many HTTP proxies and load balancers to track the client's 
    # IP address as requests pass through intermediate proxies or load balancers. 
    # By setting this header, NGINX is telling the backend server the IP address of the original client that made the request, 
    # rather than the IP address of NGINX itself. The $proxy_add_x_forwarded_for parameter tells NGINX to append the client 
    # IP address to any existing X-Forwarded-For header, rather than overwriting it.
    #? The X-Forwarded-For header is like the return address on an envelope.
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;

    # The 'proxy_set_header X-Forwarded-Proto https' directive sets the X-Forwarded-Proto header to the value 'https'
    # This ensures that the backend server (jenkins in this situation) is aware that the request is coming over HTTPS (TLS encrypted traffic)
    proxy_set_header X-Forwarded-Proto https;
  }

  location /sonarqube {
    proxy_pass http://sonarqube;

    proxy_set_header    Host                $host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
  }


  location /gitlab {
    proxy_pass http://gitlab;

    proxy_set_header    Host                $host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
  }
}